name: Build Release

on:
  push:
    branches:
      - master
    tags:
      - 'v*'

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  update_release_draft:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    outputs:
      release_body: ${{ steps.release-drafter.outputs.body }}
    steps:
      - uses: release-drafter/release-drafter@v5
        id: release-drafter
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          config-name: release-drafter.yml
          disable-autolabeler: false
          tag: ${{ github.ref_name }}
          version: ${{ github.ref_name }}

  build:
    name: Build (${{ matrix.os }})
    needs: update_release_draft
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        include:
          - os: windows-latest
            build_command: pnpm build:desktop
            artifact_name: cardmind-windows
            artifact_path: dist/*.exe
            asset_name: CardMind-Setup.exe
          - os: macos-latest
            build_command: pnpm build:desktop
            artifact_name: cardmind-macos
            artifact_path: dist/*.dmg
            asset_name: CardMind.dmg
          - os: ubuntu-latest
            build_command: pnpm build:desktop
            artifact_name: cardmind-linux
            artifact_path: dist/*.AppImage
            asset_name: CardMind.AppImage

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      # Windows-specific setup
      - name: Setup Windows build dependencies
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          ./check-msvc.bat

      # Linux-specific dependencies
      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libwebkit2gtk-4.1-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            patchelf

      # Install dependencies
      - name: Install dependencies
        run: |
          pnpm install
          pnpm list

      # Build the application
      - name: Build
        run: ${{ matrix.build_command }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # List build artifacts for debugging
      - name: List build artifacts
        shell: bash
        run: |
          echo "Listing build artifacts:"
          ls -la dist/

      # Upload artifacts to release
      - name: Upload Release Asset
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ matrix.artifact_path }}
          draft: false
          prerelease: false
          body: ${{ needs.update_release_draft.outputs.release_body }}
          token: ${{ secrets.GITHUB_TOKEN }}
